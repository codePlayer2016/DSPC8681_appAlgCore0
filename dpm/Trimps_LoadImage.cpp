/*
 * Trimps_cvLoadImage.cpp
 *
 *  Created on: 2013-1-9
 *      Author: Administrator
 */

#include "../src/_cv.h"
#include <stdio.h>
#include "cv.h"
/* Platform utilities include */
#include "ti/platform/platform.h"
extern void write_uart(char* msg);

#define BMP_ALIGN (4)

const unsigned char palette[256][4] = {
		0x00, 0x00, 0x00, 0x00,
		0x01, 0x01, 0x01, 0x00,
		0x02, 0x02, 0x02, 0x00,
		0x03, 0x03, 0x03, 0x00,
		0x04, 0x04, 0x04, 0x00,
		0x05, 0x05, 0x05, 0x00,
		0x06, 0x06, 0x06, 0x00,
		0x07, 0x07, 0x07, 0x00,
		0x08, 0x08, 0x08, 0x00,
		0x09, 0x09, 0x09, 0x00,
		0x0A, 0x0A, 0x0A, 0x00,
		0x0B, 0x0B, 0x0B, 0x00,
		0x0C, 0x0C, 0x0C, 0x00,
		0x0D, 0x0D, 0x0D, 0x00,
		0x0E, 0x0E, 0x0E, 0x00,
		0x0F, 0x0F, 0x0F, 0x00,
		0x10, 0x10, 0x10, 0x00,
		0x11, 0x11, 0x11, 0x00,
		0x12, 0x12, 0x12, 0x00,
		0x13, 0x13, 0x13, 0x00,
		0x14, 0x14, 0x14, 0x00,
		0x15, 0x15, 0x15, 0x00,
		0x16, 0x16, 0x16, 0x00,
		0x17, 0x17, 0x17, 0x00,
		0x18, 0x18, 0x18, 0x00,
		0x19, 0x19, 0x19, 0x00,
		0x1A, 0x1A, 0x1A, 0x00,
		0x1B, 0x1B, 0x1B, 0x00,
		0x1C, 0x1C, 0x1C, 0x00,
		0x1D, 0x1D, 0x1D, 0x00,
		0x1E, 0x1E, 0x1E, 0x00,
		0x1F, 0x1F, 0x1F, 0x00,
		0x20, 0x20, 0x20, 0x00,
		0x21, 0x21, 0x21, 0x00,
		0x22, 0x22, 0x22, 0x00,
		0x23, 0x23, 0x23, 0x00,
		0x24, 0x24, 0x24, 0x00,
		0x25, 0x25, 0x25, 0x00,
		0x26, 0x26, 0x26, 0x00,
		0x27, 0x27, 0x27, 0x00,
		0x28, 0x28, 0x28, 0x00,
		0x29, 0x29, 0x29, 0x00,
		0x2A, 0x2A, 0x2A, 0x00,
		0x2B, 0x2B, 0x2B, 0x00,
		0x2C, 0x2C, 0x2C, 0x00,
		0x2D, 0x2D, 0x2D, 0x00,
		0x2E, 0x2E, 0x2E, 0x00,
		0x2F, 0x2F, 0x2F, 0x00,
		0x30, 0x30, 0x30, 0x00,
		0x31, 0x31, 0x31, 0x00,
		0x32, 0x32, 0x32, 0x00,
		0x33, 0x33, 0x33, 0x00,
		0x34, 0x34, 0x34, 0x00,
		0x35, 0x35, 0x35, 0x00,
		0x36, 0x36, 0x36, 0x00,
		0x37, 0x37, 0x37, 0x00,
		0x38, 0x38, 0x38, 0x00,
		0x39, 0x39, 0x39, 0x00,
		0x3A, 0x3A, 0x3A, 0x00,
		0x3B, 0x3B, 0x3B, 0x00,
		0x3C, 0x3C, 0x3C, 0x00,
		0x3D, 0x3D, 0x3D, 0x00,
		0x3E, 0x3E, 0x3E, 0x00,
		0x3F, 0x3F, 0x3F, 0x00,
		0x40, 0x40, 0x40, 0x00,
		0x41, 0x41, 0x41, 0x00,
		0x42, 0x42, 0x42, 0x00,
		0x43, 0x43, 0x43, 0x00,
		0x44, 0x44, 0x44, 0x00,
		0x45, 0x45, 0x45, 0x00,
		0x46, 0x46, 0x46, 0x00,
		0x47, 0x47, 0x47, 0x00,
		0x48, 0x48, 0x48, 0x00,
		0x49, 0x49, 0x49, 0x00,
		0x4A, 0x4A, 0x4A, 0x00,
		0x4B, 0x4B, 0x4B, 0x00,
		0x4C, 0x4C, 0x4C, 0x00,
		0x4D, 0x4D, 0x4D, 0x00,
		0x4E, 0x4E, 0x4E, 0x00,
		0x4F, 0x4F, 0x4F, 0x00,
		0x50, 0x50, 0x50, 0x00,
		0x51, 0x51, 0x51, 0x00,
		0x52, 0x52, 0x52, 0x00,
		0x53, 0x53, 0x53, 0x00,
		0x54, 0x54, 0x54, 0x00,
		0x55, 0x55, 0x55, 0x00,
		0x56, 0x56, 0x56, 0x00,
		0x57, 0x57, 0x57, 0x00,
		0x58, 0x58, 0x58, 0x00,
		0x59, 0x59, 0x59, 0x00,
		0x5A, 0x5A, 0x5A, 0x00,
		0x5B, 0x5B, 0x5B, 0x00,
		0x5C, 0x5C, 0x5C, 0x00,
		0x5D, 0x5D, 0x5D, 0x00,
		0x5E, 0x5E, 0x5E, 0x00,
		0x5F, 0x5F, 0x5F, 0x00,
		0x60, 0x60, 0x60, 0x00,
		0x61, 0x61, 0x61, 0x00,
		0x62, 0x62, 0x62, 0x00,
		0x63, 0x63, 0x63, 0x00,
		0x64, 0x64, 0x64, 0x00,
		0x65, 0x65, 0x65, 0x00,
		0x66, 0x66, 0x66, 0x00,
		0x67, 0x67, 0x67, 0x00,
		0x68, 0x68, 0x68, 0x00,
		0x69, 0x69, 0x69, 0x00,
		0x6A, 0x6A, 0x6A, 0x00,
		0x6B, 0x6B, 0x6B, 0x00,
		0x6C, 0x6C, 0x6C, 0x00,
		0x6D, 0x6D, 0x6D, 0x00,
		0x6E, 0x6E, 0x6E, 0x00,
		0x6F, 0x6F, 0x6F, 0x00,
		0x70, 0x70, 0x70, 0x00,
		0x71, 0x71, 0x71, 0x00,
		0x72, 0x72, 0x72, 0x00,
		0x73, 0x73, 0x73, 0x00,
		0x74, 0x74, 0x74, 0x00,
		0x75, 0x75, 0x75, 0x00,
		0x76, 0x76, 0x76, 0x00,
		0x77, 0x77, 0x77, 0x00,
		0x78, 0x78, 0x78, 0x00,
		0x79, 0x79, 0x79, 0x00,
		0x7A, 0x7A, 0x7A, 0x00,
		0x7B, 0x7B, 0x7B, 0x00,
		0x7C, 0x7C, 0x7C, 0x00,
		0x7D, 0x7D, 0x7D, 0x00,
		0x7E, 0x7E, 0x7E, 0x00,
		0x7F, 0x7F, 0x7F, 0x00,
		0x80, 0x80, 0x80, 0x00,
		0x81, 0x81, 0x81, 0x00,
		0x82, 0x82, 0x82, 0x00,
		0x83, 0x83, 0x83, 0x00,
		0x84, 0x84, 0x84, 0x00,
		0x85, 0x85, 0x85, 0x00,
		0x86, 0x86, 0x86, 0x00,
		0x87, 0x87, 0x87, 0x00,
		0x88, 0x88, 0x88, 0x00,
		0x89, 0x89, 0x89, 0x00,
		0x8A, 0x8A, 0x8A, 0x00,
		0x8B, 0x8B, 0x8B, 0x00,
		0x8C, 0x8C, 0x8C, 0x00,
		0x8D, 0x8D, 0x8D, 0x00,
		0x8E, 0x8E, 0x8E, 0x00,
		0x8F, 0x8F, 0x8F, 0x00,
		0x90, 0x90, 0x90, 0x00,
		0x91, 0x91, 0x91, 0x00,
		0x92, 0x92, 0x92, 0x00,
		0x93, 0x93, 0x93, 0x00,
		0x94, 0x94, 0x94, 0x00,
		0x95, 0x95, 0x95, 0x00,
		0x96, 0x96, 0x96, 0x00,
		0x97, 0x97, 0x97, 0x00,
		0x98, 0x98, 0x98, 0x00,
		0x99, 0x99, 0x99, 0x00,
		0x9A, 0x9A, 0x9A, 0x00,
		0x9B, 0x9B, 0x9B, 0x00,
		0x9C, 0x9C, 0x9C, 0x00,
		0x9D, 0x9D, 0x9D, 0x00,
		0x9E, 0x9E, 0x9E, 0x00,
		0x9F, 0x9F, 0x9F, 0x00,
		0xA0, 0xA0, 0xA0, 0x00,
		0xA1, 0xA1, 0xA1, 0x00,
		0xA2, 0xA2, 0xA2, 0x00,
		0xA3, 0xA3, 0xA3, 0x00,
		0xA4, 0xA4, 0xA4, 0x00,
		0xA5, 0xA5, 0xA5, 0x00,
		0xA6, 0xA6, 0xA6, 0x00,
		0xA7, 0xA7, 0xA7, 0x00,
		0xA8, 0xA8, 0xA8, 0x00,
		0xA9, 0xA9, 0xA9, 0x00,
		0xAA, 0xAA, 0xAA, 0x00,
		0xAB, 0xAB, 0xAB, 0x00,
		0xAC, 0xAC, 0xAC, 0x00,
		0xAD, 0xAD, 0xAD, 0x00,
		0xAE, 0xAE, 0xAE, 0x00,
		0xAF, 0xAF, 0xAF, 0x00,
		0xB0, 0xB0, 0xB0, 0x00,
		0xB1, 0xB1, 0xB1, 0x00,
		0xB2, 0xB2, 0xB2, 0x00,
		0xB3, 0xB3, 0xB3, 0x00,
		0xB4, 0xB4, 0xB4, 0x00,
		0xB5, 0xB5, 0xB5, 0x00,
		0xB6, 0xB6, 0xB6, 0x00,
		0xB7, 0xB7, 0xB7, 0x00,
		0xB8, 0xB8, 0xB8, 0x00,
		0xB9, 0xB9, 0xB9, 0x00,
		0xBA, 0xBA, 0xBA, 0x00,
		0xBB, 0xBB, 0xBB, 0x00,
		0xBC, 0xBC, 0xBC, 0x00,
		0xBD, 0xBD, 0xBD, 0x00,
		0xBE, 0xBE, 0xBE, 0x00,
		0xBF, 0xBF, 0xBF, 0x00,
		0xC0, 0xC0, 0xC0, 0x00,
		0xC1, 0xC1, 0xC1, 0x00,
		0xC2, 0xC2, 0xC2, 0x00,
		0xC3, 0xC3, 0xC3, 0x00,
		0xC4, 0xC4, 0xC4, 0x00,
		0xC5, 0xC5, 0xC5, 0x00,
		0xC6, 0xC6, 0xC6, 0x00,
		0xC7, 0xC7, 0xC7, 0x00,
		0xC8, 0xC8, 0xC8, 0x00,
		0xC9, 0xC9, 0xC9, 0x00,
		0xCA, 0xCA, 0xCA, 0x00,
		0xCB, 0xCB, 0xCB, 0x00,
		0xCC, 0xCC, 0xCC, 0x00,
		0xCD, 0xCD, 0xCD, 0x00,
		0xCE, 0xCE, 0xCE, 0x00,
		0xCF, 0xCF, 0xCF, 0x00,
		0xD0, 0xD0, 0xD0, 0x00,
		0xD1, 0xD1, 0xD1, 0x00,
		0xD2, 0xD2, 0xD2, 0x00,
		0xD3, 0xD3, 0xD3, 0x00,
		0xD4, 0xD4, 0xD4, 0x00,
		0xD5, 0xD5, 0xD5, 0x00,
		0xD6, 0xD6, 0xD6, 0x00,
		0xD7, 0xD7, 0xD7, 0x00,
		0xD8, 0xD8, 0xD8, 0x00,
		0xD9, 0xD9, 0xD9, 0x00,
		0xDA, 0xDA, 0xDA, 0x00,
		0xDB, 0xDB, 0xDB, 0x00,
		0xDC, 0xDC, 0xDC, 0x00,
		0xDD, 0xDD, 0xDD, 0x00,
		0xDE, 0xDE, 0xDE, 0x00,
		0xDF, 0xDF, 0xDF, 0x00,
		0xE0, 0xE0, 0xE0, 0x00,
		0xE1, 0xE1, 0xE1, 0x00,
		0xE2, 0xE2, 0xE2, 0x00,
		0xE3, 0xE3, 0xE3, 0x00,
		0xE4, 0xE4, 0xE4, 0x00,
		0xE5, 0xE5, 0xE5, 0x00,
		0xE6, 0xE6, 0xE6, 0x00,
		0xE7, 0xE7, 0xE7, 0x00,
		0xE8, 0xE8, 0xE8, 0x00,
		0xE9, 0xE9, 0xE9, 0x00,
		0xEA, 0xEA, 0xEA, 0x00,
		0xEB, 0xEB, 0xEB, 0x00,
		0xEC, 0xEC, 0xEC, 0x00,
		0xED, 0xED, 0xED, 0x00,
		0xEE, 0xEE, 0xEE, 0x00,
		0xEF, 0xEF, 0xEF, 0x00,
		0xF0, 0xF0, 0xF0, 0x00,
		0xF1, 0xF1, 0xF1, 0x00,
		0xF2, 0xF2, 0xF2, 0x00,
		0xF3, 0xF3, 0xF3, 0x00,
		0xF4, 0xF4, 0xF4, 0x00,
		0xF5, 0xF5, 0xF5, 0x00,
		0xF6, 0xF6, 0xF6, 0x00,
		0xF7, 0xF7, 0xF7, 0x00,
		0xF8, 0xF8, 0xF8, 0x00,
		0xF9, 0xF9, 0xF9, 0x00,
		0xFA, 0xFA, 0xFA, 0x00,
		0xFB, 0xFB, 0xFB, 0x00,
		0xFC, 0xFC, 0xFC, 0x00,
		0xFD, 0xFD, 0xFD, 0x00,
		0xFE, 0xFE, 0xFE, 0x00,
		0xFF, 0xFF, 0xFF, 0x00,
};

typedef struct
{
	char type1;
	char type2;
}BmpFileHead;

typedef struct
{
    unsigned int imageSize;
    unsigned int blank;
    unsigned int startPosition;
    unsigned int    length;
    unsigned int    width;
    unsigned int    height;
    unsigned short    colorPlane;
    unsigned short    bitColor;
    unsigned int    zipFormat;
    unsigned int    realSize;
    unsigned int    xPels;
    unsigned int    yPels;
    unsigned int    colorUse;
    unsigned int    colorImportant;
}BmpInfoHead;


IplImage* cvLoadImageFromFile(const char* filename, int flags)
{

    int channels;
	FILE * p;
	BmpFileHead bmpfilehead;
	BmpInfoHead bmpinfohead;
	int step, modbytes, idx;
    IplImage* image = NULL;
    //char jpgFile[] = "E:/work/project/6678_accelerator/code/Images/493.bmp";
    int read_num = 0;
    int len = strlen(filename);

    if( !filename || strlen(filename) == 0 )
	{
        printf( "loadsave.cpp : cvLoadImage : null filename\n" );
		return NULL;
	}

 	p = fopen(filename, "rb");
 	if(!p)
	{
		printf( "loadsave.cpp : cvLoadImage : Can not open %s\n" ,filename);
		return NULL;
	}
	read_num = fread(&bmpfilehead, 1, sizeof(BmpFileHead), p);
	if(read_num !=  sizeof(BmpFileHead))
	{
		printf( "loadsave.cpp : cvLoadImage : Read file erro\n" );//image = NULL;
		fclose(p);
		return NULL;
	}
	read_num  = fread(&bmpinfohead, 1, sizeof(BmpInfoHead), p);
	if(read_num !=  sizeof(BmpInfoHead))
	{
		printf( "loadsave.cpp : cvLoadImage : Read file erro\n" );//image = NULL;
		fclose(p);
		return NULL;
	}

	if( (bmpfilehead.type1 != 'B' && bmpfilehead.type1 != 'b') ||
		(bmpfilehead.type2 != 'M' && bmpfilehead.type2 != 'm') )
	{
		fclose(p);
		return NULL;
	}

	channels = bmpinfohead.bitColor / 8;
	if( channels != 1 && channels != 3)
	{
		fclose(p);
		return NULL;
	}

	if(bmpinfohead.width <= 0 || bmpinfohead.height <=0)
	{
		fclose(p);
		return NULL;
	}

 	modbytes = (bmpinfohead.width*channels) & (BMP_ALIGN - 1);
 	step = modbytes ? ((bmpinfohead.width*channels)-modbytes + BMP_ALIGN)  : (bmpinfohead.width*channels);

	image = cvCreateImage(cvSize(bmpinfohead.width, bmpinfohead.height), 8, channels);
	fseek(p, bmpinfohead.startPosition, SEEK_SET);//��������ɫ��
	char *pdata = image->imageData + (bmpinfohead.height - 1) * image->widthStep;
	for(idx=bmpinfohead.height-1; idx >= 0 ; idx--)
	{
		read_num  = fread(pdata, 1, step, p);
		if(read_num!=step)
		{
			image = NULL;
			printf("%s #fread erro.\n",filename);
			fclose(p);
			return NULL;
		}
		pdata -= image->widthStep;
	}
	fclose(p);
	return image;
}


IplImage* cvLoadImageFromArray( const char* filedata, int flags)
{

	    int channels;
		//FILE * p;
		BmpFileHead bmpfilehead;
		BmpInfoHead bmpinfohead;
		int step, modbytes, idx;
		IplImage* image = 0;


		memcpy(&bmpfilehead,filedata, sizeof(BmpFileHead));
		memcpy(&bmpinfohead,filedata + sizeof(BmpFileHead), sizeof(BmpInfoHead));

		if( (bmpfilehead.type1 != 'B' && bmpfilehead.type1 != 'b') ||
			(bmpfilehead.type2 != 'M' && bmpfilehead.type2 != 'm') )
		{
			printf( "loadsave.cpp : cvLoadImage : The file is not a BMP file" );
			return NULL;
		}

		channels = bmpinfohead.bitColor / 8;
		if( channels != 1 && channels != 3)
		{
			printf( "loadsave.cpp : cvLoadImage : Only 1 or 3 channels images can be loaded." );
			return NULL;
		}

		if(bmpinfohead.width <= 0 || bmpinfohead.height <=0)
		{
			printf( "loadsave.cpp : cvLoadImage : Bad image size" );
			return NULL;
		}

	 	modbytes = (bmpinfohead.width*channels)%4;//CV_DEFAULT_IMAGE_ROW_ALIGN;
	 	step = modbytes ? ((bmpinfohead.width*channels)-modbytes+4)  : (bmpinfohead.width*channels);

		image = cvCreateImage(cvSize(bmpinfohead.width, bmpinfohead.height), IPL_DEPTH_8U, channels);
		if(image == NULL)
			return image;
		char *dst,*src;
	src = (char*)filedata + bmpinfohead.startPosition;
//		src = (char*)filedata + sizeof(BmpFileHead) + sizeof(BmpInfoHead);
		dst = image->imageData + (bmpinfohead.height-1) * image->widthStep;
		//step = image->width * channels;

		for(idx=bmpinfohead.height-1; idx >= 0 ; idx--)
		{
			memcpy(dst,src, step);
			src += step;
			dst -= image->widthStep;
		}

		return image;

}

int cvSaveImage(const char* filename, const CvArr* image)
{

	FILE * p;
	BmpFileHead bmpfilehead = {'B','M'};
	BmpInfoHead bmpinfohead;
    IplImage Header;
    IplImage *src = cvGetImage(image,&Header);
    int write_num = 0;

    int step = src->width * src->nChannels;//windowsλͼstep������4�ı���
	int modbyte = step & (BMP_ALIGN - 1); //
	if (modbyte != 0)
		step += (BMP_ALIGN - modbyte);

    if( !filename || strlen(filename) == 0 )
	{
        printf( "%s : cvSaveImage : null filename.\n",__FILE__ );
        return -1;
	}

 	p = fopen(filename, "wb+");
 	if(!p)
	{
		printf( "%s : cvSaveImage : Can not open %s.\n" ,__FILE__,filename);
		return -1;
	}
	write_num = fwrite(&bmpfilehead, 1, sizeof(BmpFileHead), p);
	if(write_num !=  sizeof(BmpFileHead))
	{
		printf( "%s : cvSaveImage : Read file erro.\n" ,__FILE__);//image = NULL;
		fclose(p);
		return -1;
	}
	bmpinfohead.startPosition = sizeof(BmpFileHead) + sizeof(BmpInfoHead);
	bmpinfohead.realSize = step*src->height;//src->imageSize;
	bmpinfohead.imageSize = bmpinfohead.realSize + bmpinfohead.startPosition;
	bmpinfohead.blank = 0;
	bmpinfohead.length = 0x28;
	bmpinfohead.width = src->width;
	bmpinfohead.height= src->height;
	bmpinfohead.colorPlane = 0x01;
	bmpinfohead.bitColor = src->depth * src->nChannels;
	bmpinfohead.zipFormat = 0;
	bmpinfohead.realSize = src->imageSize;
	bmpinfohead.xPels = 0xEC4;
	bmpinfohead.yPels = 0xEC4;
	bmpinfohead.colorUse = 0;
	bmpinfohead.colorImportant = 0;
	if(src->nChannels == 1)//Gray Image-->write palette
	{
		bmpinfohead.startPosition += sizeof(palette);
		bmpinfohead.imageSize += sizeof(palette);
		write_num  = fwrite(&bmpinfohead, 1, sizeof(BmpInfoHead), p);
		if(write_num !=  sizeof(BmpInfoHead))
		{
			printf( "%s : cvSaveImage : Read file erro.\n",__FILE__ );//image = NULL;
			fclose(p);
			return -1;
		}
		write_num  = fwrite(&palette[0][0], 1, sizeof(palette), p);
		if(write_num !=  sizeof(palette))
		{
			printf( "%s : cvSaveImage : Read file erro.\n",__FILE__ );//image = NULL;
			fclose(p);
			return -1;
		}
	}
	else
	{
		write_num  = fwrite(&bmpinfohead, 1, sizeof(BmpInfoHead), p);
		if(write_num !=  sizeof(BmpInfoHead))
		{
			printf("%s : cvSaveImage : Read file erro.\n", __FILE__); //image = NULL;
			fclose(p);
			return -1;
		}
	}
	char *pdata = src->imageData + (src->height - 1) * src->widthStep;

	for(int idx = src->height - 1; idx >= 0 ; idx--)
	{
		write_num  = fwrite(pdata, 1, step , p);
		if(write_num != step)
		{
			printf("%s cvSaveImage: #fwrite erro\n",filename);
			fclose(p);
			return -1;
		}
		pdata -= src->widthStep;
	}
	fclose(p);
	return 0;
}

int cvSaveImageInAddr(char* addr, const CvArr* image)
{

	BmpFileHead bmpfilehead = {'B','M'};
	BmpInfoHead bmpinfohead;
    IplImage Header;
    if(addr == NULL || image == NULL)
    	return 0;
    IplImage *src = cvGetImage(image,&Header);
    int step = src->width * src->nChannels;//windowsλͼstep������4�ı���
    int modbyte = step & (BMP_ALIGN - 1);//
    if(modbyte != 0)
    	step  += (BMP_ALIGN - modbyte);
//	write_num = fwrite(&bmpfilehead, 1, sizeof(BmpFileHead), p);
    memcpy(addr,&bmpfilehead,sizeof(BmpFileHead));
	addr += sizeof(BmpFileHead);//move to next section
	bmpinfohead.blank = 0;
	bmpinfohead.startPosition = sizeof(BmpFileHead) + sizeof(BmpInfoHead);
	bmpinfohead.realSize = step * src->height;
	bmpinfohead.imageSize = bmpinfohead.realSize + bmpinfohead.startPosition;
	bmpinfohead.length = 0x28;
	bmpinfohead.width = src->width;
	bmpinfohead.height= src->height;
	bmpinfohead.colorPlane = 0x01;
	bmpinfohead.bitColor = src->depth * src->nChannels;
	bmpinfohead.zipFormat = 0;
	bmpinfohead.xPels = 0xEC4;
	bmpinfohead.yPels = 0xEC4;
	bmpinfohead.colorUse = 0;
	bmpinfohead.colorImportant = 0;
	if(src->nChannels == 1)//Gray Image-->write palette
	{
		bmpinfohead.startPosition += sizeof(palette);
		bmpinfohead.imageSize += sizeof(palette);
//		write_num  = fwrite(&bmpinfohead, 1, sizeof(BmpInfoHead), p);
		memcpy(addr,&bmpinfohead, sizeof(BmpInfoHead));
		addr += sizeof(BmpInfoHead);//move to next section
//		write_num  = fwrite(&palette[0][0], 1, sizeof(palette), p);
		memcpy(addr,&palette[0][0],sizeof(palette));
		addr += sizeof(palette);//move to next section
	}
	else
	{
//		write_num  = fwrite(&bmpinfohead, 1, sizeof(BmpInfoHead), p);
		memcpy(addr,&bmpinfohead, sizeof(BmpInfoHead));
		addr += sizeof(BmpInfoHead);//move to next section
	}
	char *pdata = src->imageData + (src->height - 1) * src->widthStep;

	for(int idx = src->height - 1; idx >= 0 ; idx--)
	{
//		write_num  = fwrite(pdata, 1, step , p);
		memcpy(addr,pdata, step);
		addr += step;//move to next section
		pdata -= src->widthStep;
	}
	return bmpinfohead.imageSize;
}

/*
 * pdst-Ŀ��bmpͼ��ַ imgData-ͼ��Դ��ַ��width��height��ߣ�widthstep �ֽڶ���Դͼÿ���ֽ���8�ֽڣ���channelͨ����
 */
int cvSaveImageInAddr0(char* pdst, char* imgData,const int imgWidth, const int imgHeight, const int imgWidthStep, const int channels)
{
	char *addr = pdst;
	BmpFileHead bmpfilehead = {'B','M'};
	BmpInfoHead bmpinfohead;
	int step = imgWidth * channels; //windowsλͼstep������4�ı���
	int modbyte = step & (BMP_ALIGN - 1); //
	if (modbyte != 0)
		step += (BMP_ALIGN - modbyte);

    memcpy(addr,&bmpfilehead,sizeof(BmpFileHead));
	addr += sizeof(BmpFileHead);//move to next section

	bmpinfohead.blank = 0;
	bmpinfohead.startPosition = sizeof(BmpFileHead) + sizeof(BmpInfoHead);
	bmpinfohead.realSize = step * imgHeight;
	bmpinfohead.imageSize = bmpinfohead.realSize + bmpinfohead.startPosition;
	bmpinfohead.length = 0x28;
	bmpinfohead.width = imgWidth;
	bmpinfohead.height= imgHeight;
	bmpinfohead.colorPlane = 0x01;
	bmpinfohead.bitColor = 8 * channels;
	bmpinfohead.zipFormat = 0;
	bmpinfohead.xPels = 0xEC4;
	bmpinfohead.yPels = 0xEC4;
	bmpinfohead.colorUse = 0;
	bmpinfohead.colorImportant = 0;
	if(channels == 1)//Gray Image-->write palette
	{
		bmpinfohead.startPosition += sizeof(palette);
		bmpinfohead.imageSize += sizeof(palette);
		memcpy(addr,&bmpinfohead, sizeof(BmpInfoHead));
		addr += sizeof(BmpInfoHead);//move to next section
		memcpy(addr,&palette[0][0],sizeof(palette));
		addr += sizeof(palette);//move to next section
	}
	else
	{
		memcpy(addr,&bmpinfohead, sizeof(BmpInfoHead));
		addr += sizeof(BmpInfoHead);//move to next section
	}
	char *pdata = imgData + (imgHeight - 1) * imgWidthStep;

	for(int idx = imgHeight - 1; idx >= 0 ; idx--)
	{
		memcpy(addr,pdata, step);
		addr += step;//move to next section
		pdata -= imgWidthStep;
	}
//	FILE* p = fopen("test.bmp", "wb+");
//	fwrite(pdst,1,bmpinfohead.realSize,p);
//	fclose(p);
	return bmpinfohead.imageSize;
}

int cvGetSaveImageSize(const int imgWidth, const int imgHeight,const int channels)
{
	int step = imgWidth * channels; //windowsλͼstep������4�ı���
	int modbyte = step & (BMP_ALIGN - 1); //
	if (modbyte != 0)
		step += (BMP_ALIGN - modbyte);
	int realSize = step * imgHeight;
	int startPosition = sizeof(BmpFileHead) + sizeof(BmpInfoHead);
	int imageSize = realSize + startPosition;
	if(channels == 1)
		imageSize += sizeof(palette);
	return imageSize;
}


